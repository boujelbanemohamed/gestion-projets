-- SOLUTION FINALE - Ã‰VITER LES CONTRAINTES FK
-- Cette solution crÃ©e de nouveaux profils sans toucher aux existants

-- ========================================
-- PHASE 1: ANALYSE DE L'Ã‰TAT ACTUEL
-- ========================================

SELECT '=== ANALYSE DE L Ã‰TAT ACTUEL ===' as info;

-- Voir l'Ã©tat actuel
SELECT 
  'Auth users' as source,
  COUNT(*) as total
FROM auth.users
UNION ALL
SELECT 
  'Public users' as source,
  COUNT(*) as total
FROM public.users;

-- ========================================
-- PHASE 2: CRÃ‰ATION DE PROFILS MANQUANTS
-- ========================================

SELECT '=== CRÃ‰ATION DE PROFILS MANQUANTS ===' as info;

-- CrÃ©er les profils manquants pour les utilisateurs auth sans profil public
-- On utilise ON CONFLICT DO NOTHING pour Ã©viter les erreurs
INSERT INTO public.users (
  id,
  email,
  nom,
  prenom,
  role,
  fonction,
  department_id,
  created_at,
  updated_at
)
SELECT 
  au.id,
  au.email,
  COALESCE(au.raw_user_meta_data->>'nom', au.email) as nom,
  COALESCE(au.raw_user_meta_data->>'prenom', 'Utilisateur') as prenom,
  COALESCE(au.raw_user_meta_data->>'role', 'USER')::user_role_enum as role,
  COALESCE(au.raw_user_meta_data->>'fonction', '') as fonction,
  COALESCE(au.raw_user_meta_data->>'department_id', NULL)::uuid as department_id,
  au.created_at,
  au.updated_at
FROM auth.users au
WHERE NOT EXISTS (
  SELECT 1 FROM public.users pu WHERE pu.email = au.email
)
ON CONFLICT (id) DO NOTHING;

-- ========================================
-- PHASE 3: VÃ‰RIFICATION DE LA SYNCHRONISATION
-- ========================================

SELECT '=== VÃ‰RIFICATION DE LA SYNCHRONISATION ===' as info;

-- VÃ©rifier la synchronisation
SELECT 
  'Auth users' as source,
  COUNT(*) as total
FROM auth.users
UNION ALL
SELECT 
  'Public users' as source,
  COUNT(*) as total
FROM public.users
UNION ALL
SELECT 
  'Utilisateurs synchronisÃ©s' as source,
  COUNT(*) as total
FROM auth.users au
INNER JOIN public.users pu ON au.id = pu.id;

-- VÃ©rifier qu'il n'y a plus de doublons
SELECT 
  'Doublons d emails' as check_type,
  COUNT(*) as total
FROM (
  SELECT email, COUNT(*) 
  FROM public.users 
  GROUP BY email 
  HAVING COUNT(*) > 1
) as doublons;

-- ========================================
-- PHASE 4: TEST DE CONNEXION
-- ========================================

SELECT '=== TEST DE CONNEXION ===' as info;

-- VÃ©rifier qu'on peut faire un SELECT sans erreur
SELECT 
  'Test SELECT rÃ©ussi' as status,
  COUNT(*) as users_count
FROM public.users;

-- VÃ©rifier que les projets sont toujours intacts
SELECT 
  'Projets prÃ©servÃ©s' as status,
  COUNT(*) as total_projets
FROM public.projects;

-- ========================================
-- PHASE 5: RÃ‰SULTAT FINAL
-- ========================================

SELECT 'âœ… SOLUTION FINALE TERMINÃ‰E' as result;
SELECT 'ðŸŽ¯ Testez maintenant la connexion dans l application' as next_step;
SELECT 'ðŸ’¾ Tous vos projets ont Ã©tÃ© prÃ©servÃ©s' as note;
SELECT 'ðŸ”’ Aucune contrainte FK violÃ©e' as security;
