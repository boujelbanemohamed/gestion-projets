// Script de test pour v√©rifier l'assignation des t√¢ches
// √Ä ex√©cuter dans la console du navigateur sur http://localhost:8001

console.log('üë• TEST D\'ASSIGNATION DES T√ÇCHES');
console.log('================================');

async function testTaskAssignment() {
    const results = {
        projectWithMembers: { tested: false, success: false, memberCount: 0 },
        projectWithoutMembers: { tested: false, success: false, hasWarning: false },
        taskCreation: { tested: false, success: false, onlyProjectMembers: false },
        memberManagement: { tested: false, success: false, buttonVisible: false }
    };

    function log(message, type = 'info') {
        const timestamp = new Date().toLocaleTimeString();
        const prefix = type === 'error' ? '‚ùå' : type === 'success' ? '‚úÖ' : type === 'warning' ? '‚ö†Ô∏è' : '‚ÑπÔ∏è';
        console.log(`[${timestamp}] ${prefix} ${message}`);
    }

    function clickAndWait(element, waitTime = 1000) {
        return new Promise((resolve) => {
            if (element) {
                const event = new MouseEvent('click', {
                    view: window,
                    bubbles: true,
                    cancelable: true
                });
                element.dispatchEvent(event);
            }
            setTimeout(resolve, waitTime);
        });
    }

    function countUsersInModal(modal) {
        if (!modal) return 0;
        
        // Chercher les utilisateurs dans le modal
        const userCheckboxes = modal.querySelectorAll('input[type="checkbox"]');
        const userLabels = modal.querySelectorAll('label:has(input[type="checkbox"])');
        const userElements = modal.querySelectorAll('[class*="user"], [class*="member"]');
        
        return Math.max(userCheckboxes.length, userLabels.length, userElements.length);
    }

    log('üîç Test de l\'assignation des t√¢ches aux membres du projet');

    // Test 1: Projet avec membres existants
    log('\nüìä Test 1: Projet avec membres existants');
    try {
        const projectCards = document.querySelectorAll('[class*="bg-white"][class*="rounded"]');
        if (projectCards.length > 0) {
            // Cliquer sur le premier projet
            await clickAndWait(projectCards[0], 1000);

            // Chercher des informations sur les membres
            const memberElements = Array.from(document.querySelectorAll('*')).filter(el => 
                el.textContent && (
                    el.textContent.includes('membre') ||
                    el.textContent.includes('Membre') ||
                    el.textContent.includes('assign√©') ||
                    el.textContent.includes('Assign√©')
                )
            );

            // Chercher le bouton "Nouvelle T√¢che"
            const newTaskButton = Array.from(document.querySelectorAll('button')).find(btn => 
                btn.textContent && btn.textContent.includes('Nouvelle T√¢che')
            );

            const isButtonDisabled = newTaskButton && (newTaskButton.disabled || newTaskButton.className.includes('disabled'));

            results.projectWithMembers = {
                tested: true,
                success: newTaskButton !== undefined,
                memberCount: memberElements.length
            };

            log(`üìä Projet ouvert: ${newTaskButton ? '‚úÖ' : '‚ùå'} Bouton "Nouvelle T√¢che" ${isButtonDisabled ? 'd√©sactiv√©' : 'disponible'}`);
            log(`üë• ${memberElements.length} √©l√©ments li√©s aux membres trouv√©s`);

        } else {
            log('‚ö†Ô∏è Aucun projet trouv√© pour le test');
        }
    } catch (error) {
        log(`‚ùå Erreur lors du test de projet avec membres: ${error.message}`, 'error');
    }

    // Test 2: Cr√©ation de t√¢che et v√©rification des utilisateurs disponibles
    log('\nüìù Test 2: Cr√©ation de t√¢che');
    try {
        const newTaskButton = Array.from(document.querySelectorAll('button')).find(btn => 
            btn.textContent && btn.textContent.includes('Nouvelle T√¢che')
        );

        if (newTaskButton && !newTaskButton.disabled) {
            log('üîÑ Ouverture du modal de cr√©ation de t√¢che...');
            await clickAndWait(newTaskButton, 1500);

            const modal = document.querySelector('[class*="fixed"][class*="inset-0"]');
            if (modal) {
                // Chercher la section des personnes assign√©es
                const assignmentSection = Array.from(modal.querySelectorAll('*')).find(el => 
                    el.textContent && el.textContent.includes('Personnes assign√©es')
                );

                if (assignmentSection) {
                    const userCount = countUsersInModal(modal);
                    
                    // Chercher un message d'avertissement
                    const warningMessage = Array.from(modal.querySelectorAll('*')).find(el => 
                        el.textContent && (
                            el.textContent.includes('Aucun membre assign√©') ||
                            el.textContent.includes('Veuillez assigner') ||
                            el.textContent.includes('assigner des utilisateurs')
                        )
                    );

                    results.taskCreation = {
                        tested: true,
                        success: assignmentSection !== undefined,
                        onlyProjectMembers: userCount > 0 && userCount < 10 // Assume moins de 10 = membres du projet seulement
                    };

                    log(`‚úÖ Section assignation trouv√©e: ${userCount} utilisateur(s) disponible(s)`);
                    if (warningMessage) {
                        log(`‚ö†Ô∏è Message d'avertissement: "${warningMessage.textContent.substring(0, 50)}..."`);
                    }
                    log(`üìä Restriction aux membres du projet: ${userCount < 10 ? '‚úÖ Oui' : '‚ùå Non (tous les utilisateurs)'}`);

                } else {
                    log('‚ùå Section "Personnes assign√©es" non trouv√©e');
                }

                // Fermer le modal
                const closeButton = modal.querySelector('button[class*="text-gray-400"]') ||
                                  Array.from(modal.querySelectorAll('button')).find(btn => 
                                      btn.textContent && btn.textContent.includes('Annuler')
                                  );
                if (closeButton) {
                    await clickAndWait(closeButton, 500);
                }
            } else {
                log('‚ùå Modal de cr√©ation de t√¢che non ouvert');
            }
        } else {
            log('‚ö†Ô∏è Bouton "Nouvelle T√¢che" non disponible ou d√©sactiv√©');
            
            // Chercher un bouton "Assigner des membres"
            const assignMembersButton = Array.from(document.querySelectorAll('button')).find(btn => 
                btn.textContent && btn.textContent.includes('Assigner des membres')
            );

            results.memberManagement = {
                tested: true,
                success: assignMembersButton !== undefined,
                buttonVisible: assignMembersButton !== undefined
            };

            if (assignMembersButton) {
                log('‚úÖ Bouton "Assigner des membres" trouv√©');
            } else {
                log('‚ùå Bouton "Assigner des membres" non trouv√©');
            }
        }
    } catch (error) {
        log(`‚ùå Erreur lors du test de cr√©ation de t√¢che: ${error.message}`, 'error');
    }

    // Test 3: V√©rification des messages d'avertissement
    log('\n‚ö†Ô∏è Test 3: Messages d\'avertissement');
    try {
        // Chercher des messages d'avertissement sur la page
        const warningMessages = Array.from(document.querySelectorAll('*')).filter(el => 
            el.textContent && (
                el.textContent.includes('Aucun membre assign√©') ||
                el.textContent.includes('Veuillez assigner') ||
                el.textContent.includes('assigner des utilisateurs') ||
                el.textContent.includes('Assigner des membres')
            )
        );

        results.projectWithoutMembers = {
            tested: true,
            success: warningMessages.length > 0,
            hasWarning: warningMessages.length > 0
        };

        if (warningMessages.length > 0) {
            log(`‚úÖ ${warningMessages.length} message(s) d'avertissement trouv√©(s)`);
            warningMessages.forEach((msg, index) => {
                log(`   ${index + 1}. "${msg.textContent.substring(0, 60)}..."`);
            });
        } else {
            log('‚ÑπÔ∏è Aucun message d\'avertissement trouv√© (normal si le projet a des membres)');
        }
    } catch (error) {
        log(`‚ùå Erreur lors de la v√©rification des avertissements: ${error.message}`, 'error');
    }

    // R√©sum√© des r√©sultats
    log('\nüìä R√âSUM√â DES TESTS');
    log('==================');

    const totalTested = Object.values(results).filter(r => r.tested).length;
    const totalSuccess = Object.values(results).filter(r => r.success).length;

    log(`üß™ Tests effectu√©s: ${totalTested}/4`);
    log(`‚úÖ Tests r√©ussis: ${totalSuccess}/${totalTested}`);

    Object.entries(results).forEach(([test, result]) => {
        const testNames = {
            projectWithMembers: 'Projet avec membres',
            projectWithoutMembers: 'Messages d\'avertissement',
            taskCreation: 'Cr√©ation de t√¢che',
            memberManagement: 'Gestion des membres'
        };
        
        if (result.tested) {
            const status = result.success ? '‚úÖ OK' : '‚ùå Probl√®me';
            let details = '';
            
            if (test === 'projectWithMembers') {
                details = `${result.memberCount} √©l√©ments membres`;
            } else if (test === 'taskCreation') {
                details = result.onlyProjectMembers ? 'Membres du projet seulement' : 'Tous les utilisateurs';
            } else if (test === 'memberManagement') {
                details = result.buttonVisible ? 'Bouton visible' : 'Bouton non visible';
            } else if (test === 'projectWithoutMembers') {
                details = result.hasWarning ? 'Avertissements pr√©sents' : 'Pas d\'avertissement';
            }
            
            log(`${testNames[test]}: ${status} - ${details}`);
        } else {
            log(`${testNames[test]}: ‚è≠Ô∏è Non test√©`);
        }
    });

    // Verdict final
    log('\nüèÜ VERDICT FINAL:');
    if (totalSuccess === totalTested && totalTested >= 3) {
        log('üéâ PARFAIT! L\'assignation des t√¢ches fonctionne correctement');
        log('‚úÖ Seuls les membres du projet peuvent √™tre assign√©s aux t√¢ches');
    } else if (totalSuccess >= totalTested * 0.7) {
        log('üëç BIEN! La plupart des fonctionnalit√©s fonctionnent');
        log('‚ö†Ô∏è Quelques am√©liorations possibles');
    } else {
        log('‚ùå PROBL√àME! L\'assignation des t√¢ches n√©cessite des corrections');
    }

    // Recommandations
    log('\nüí° RECOMMANDATIONS:');
    if (!results.taskCreation.onlyProjectMembers) {
        log('üîß V√©rifier que seuls les membres du projet apparaissent dans la cr√©ation de t√¢che');
    }
    if (!results.memberManagement.buttonVisible && !results.projectWithoutMembers.hasWarning) {
        log('üîß Ajouter des moyens d\'assigner des membres au projet');
    }
    if (results.taskCreation.success && results.taskCreation.onlyProjectMembers) {
        log('‚úÖ Comportement correct: restriction aux membres du projet');
    }

    return results;
}

// Test sp√©cifique pour un nouveau projet
async function testNewProjectTaskAssignment() {
    console.log('\nüÜï TEST SP√âCIFIQUE: NOUVEAU PROJET SANS MEMBRES');
    console.log('===============================================');
    
    console.log('üìã Instructions pour test manuel:');
    console.log('1. Cr√©er un nouveau projet (sans assigner de membres)');
    console.log('2. Ouvrir le projet cr√©√©');
    console.log('3. Essayer de cr√©er une nouvelle t√¢che');
    console.log('4. V√©rifier le comportement:');
    console.log('   ‚úÖ Bouton "Nouvelle T√¢che" d√©sactiv√© OU');
    console.log('   ‚úÖ Message "Veuillez assigner des utilisateurs"');
    console.log('   ‚úÖ Bouton "Assigner des membres" visible');
    console.log('');
    console.log('‚ùå Probl√®me si: Tous les utilisateurs du syst√®me apparaissent');
}

// Fonctions d'acc√®s rapide
window.testTaskAssignment = testTaskAssignment;
window.testNewProjectTaskAssignment = testNewProjectTaskAssignment;

// Message d'aide
console.log('üë• Testeur d\'assignation des t√¢ches charg√©!');
console.log('üí° Utilisez testTaskAssignment() pour le test automatique');
console.log('üí° Utilisez testNewProjectTaskAssignment() pour les instructions de test manuel');
console.log('‚ö†Ô∏è Assurez-vous d\'√™tre sur http://localhost:8001 avec un projet ouvert');

// Lancement automatique apr√®s 2 secondes
setTimeout(() => {
    console.log('üöÄ Lancement automatique du test...');
    testTaskAssignment();
}, 2000);
