// Script pour uploader les donn√©es mock√©es dans Supabase
// √Ä ex√©cuter dans la console du navigateur sur votre application

console.log('üöÄ UPLOAD DES DONN√âES MOCK√âES VERS SUPABASE');
console.log('='.repeat(60));

const SUPABASE_URL = 'https://obdadipsbbrlwetkuyui.supabase.co';
const SUPABASE_ANON_KEY = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9iZGFkaXBzYmJybHdldGt1eXVpIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTQ0ODgxMjMsImV4cCI6MjA3MDA2NDEyM30.jracnTOp7Y0QBTbt7qjY4076aBqh3pq7DR-rU_U33fo';

// Donn√©es mock√©es √† uploader
const mockData = {
    departments: [
        { nom: 'IT' },
        { nom: 'Design' },
        { nom: 'Marketing' },
        { nom: 'Qualit√©' },
        { nom: 'RH' }
    ],
    
    // Note: Les utilisateurs seront cr√©√©s via l'authentification Supabase
    // Leurs profils √©tendus seront cr√©√©s automatiquement
    
    projects: [
        {
            nom: 'Refonte Site Web',
            description: 'Modernisation compl√®te du site web de l\'entreprise avec une nouvelle interface utilisateur.',
            type_projet: 'D√©veloppement Web',
            budget_initial: 25000,
            devise: 'EUR',
            statut: 'en_cours'
        },
        {
            nom: 'Application Mobile',
            description: 'D√©veloppement d\'une application mobile native pour iOS et Android.',
            type_projet: 'D√©veloppement Mobile',
            budget_initial: 35000,
            devise: 'EUR',
            statut: 'planifie'
        },
        {
            nom: 'Migration Base de Donn√©es',
            description: 'Migration de l\'ancienne base de donn√©es vers une nouvelle infrastructure cloud.',
            type_projet: 'Infrastructure',
            budget_initial: 15000,
            devise: 'EUR',
            statut: 'planifie'
        }
    ]
};

async function uploadData(table, data, description) {
    console.log(`\nüì§ Upload ${description}...`);
    
    try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/${table}`, {
            method: 'POST',
            headers: {
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`,
                'Content-Type': 'application/json',
                'Prefer': 'return=representation'
            },
            body: JSON.stringify(data)
        });

        if (response.ok) {
            const result = await response.json();
            console.log(`‚úÖ ${description}: ${Array.isArray(result) ? result.length : 1} enregistrement(s) cr√©√©(s)`);
            return { success: true, data: result };
        } else if (response.status === 401 || response.status === 403) {
            console.log(`üîí ${description}: Acc√®s restreint (RLS activ√©) - Normal en production`);
            return { success: false, reason: 'restricted' };
        } else if (response.status === 409) {
            console.log(`‚ö†Ô∏è ${description}: Donn√©es d√©j√† existantes (conflit)`);
            return { success: false, reason: 'conflict' };
        } else {
            const error = await response.text();
            console.log(`‚ùå ${description}: Erreur ${response.status} - ${error}`);
            return { success: false, reason: 'error', details: error };
        }
    } catch (error) {
        console.log(`‚ùå ${description}: Erreur r√©seau - ${error.message}`);
        return { success: false, reason: 'network', details: error.message };
    }
}

async function checkExistingData(table, description) {
    console.log(`üîç V√©rification ${description}...`);
    
    try {
        const response = await fetch(`${SUPABASE_URL}/rest/v1/${table}?select=*&limit=10`, {
            headers: {
                'apikey': SUPABASE_ANON_KEY,
                'Authorization': `Bearer ${SUPABASE_ANON_KEY}`
            }
        });

        if (response.ok) {
            const data = await response.json();
            const count = Array.isArray(data) ? data.length : 0;
            console.log(`üìä ${description}: ${count} enregistrement(s) existant(s)`);
            return { exists: count > 0, count: count, data: data };
        } else if (response.status === 401 || response.status === 403) {
            console.log(`üîí ${description}: Acc√®s restreint (RLS activ√©)`);
            return { exists: null, reason: 'restricted' };
        } else {
            console.log(`‚ùå ${description}: Erreur ${response.status}`);
            return { exists: false, reason: 'error' };
        }
    } catch (error) {
        console.log(`‚ùå ${description}: Erreur r√©seau - ${error.message}`);
        return { exists: false, reason: 'network' };
    }
}

async function uploadAllMockData() {
    console.log('\nüîç √âTAPE 1: V√âRIFICATION DES DONN√âES EXISTANTES');
    console.log('-'.repeat(50));
    
    const checks = {
        departments: await checkExistingData('departments', 'D√©partements'),
        projects: await checkExistingData('projects', 'Projets')
    };
    
    console.log('\nüì§ √âTAPE 2: UPLOAD DES DONN√âES MANQUANTES');
    console.log('-'.repeat(50));
    
    const results = {};
    
    // Upload d√©partements si n√©cessaire
    if (!checks.departments.exists) {
        results.departments = await uploadData('departments', mockData.departments, 'D√©partements');
    } else {
        console.log('‚è≠Ô∏è D√©partements: D√©j√† pr√©sents, skip');
        results.departments = { success: true, skipped: true };
    }
    
    // Upload projets si n√©cessaire
    if (!checks.projects.exists) {
        results.projects = await uploadData('projects', mockData.projects, 'Projets');
    } else {
        console.log('‚è≠Ô∏è Projets: D√©j√† pr√©sents, skip');
        results.projects = { success: true, skipped: true };
    }
    
    console.log('\n' + '='.repeat(60));
    console.log('üìã R√âSUM√â DE L\'UPLOAD');
    console.log('='.repeat(60));
    
    let successCount = 0;
    let totalCount = 0;
    
    Object.entries(results).forEach(([table, result]) => {
        totalCount++;
        if (result.success) {
            successCount++;
            const status = result.skipped ? 'D√âJ√Ä PR√âSENT' : 'UPLOAD√â';
            console.log(`‚úÖ ${table}: ${status}`);
        } else {
            const reason = result.reason === 'restricted' ? 'ACC√àS RESTREINT (NORMAL)' : 
                          result.reason === 'conflict' ? 'CONFLIT (D√âJ√Ä EXISTANT)' : 'ERREUR';
            console.log(`‚ö†Ô∏è ${table}: ${reason}`);
        }
    });
    
    console.log(`\nüéØ R√©sultat: ${successCount}/${totalCount} tables trait√©es avec succ√®s`);
    
    if (successCount === totalCount) {
        console.log('üéâ EXCELLENT ! Toutes les donn√©es mock√©es sont maintenant disponibles');
    } else {
        console.log('‚ö†Ô∏è Certaines donn√©es n\'ont pas pu √™tre upload√©es (souvent normal avec RLS)');
    }
    
    console.log('\nüìã PROCHAINES √âTAPES:');
    console.log('1. Cr√©ez un compte utilisateur via l\'interface d\'authentification');
    console.log('2. Connectez-vous avec votre compte');
    console.log('3. Testez les fonctionnalit√©s de l\'application');
    
    return results;
}

// Fonction pour cr√©er un utilisateur de test (n√©cessite d'√™tre connect√© en tant qu'admin)
async function createTestUser(email, password, role = 'UTILISATEUR') {
    console.log(`\nüë§ Cr√©ation de l'utilisateur de test: ${email}`);
    
    try {
        // Utiliser l'API d'authentification Supabase pour cr√©er l'utilisateur
        const authResponse = await fetch(`${SUPABASE_URL}/auth/v1/signup`, {
            method: 'POST',
            headers: {
                'apikey': SUPABASE_ANON_KEY,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                email: email,
                password: password,
                data: {
                    role: role,
                    nom: email.split('@')[0].split('.')[1] || 'Test',
                    prenom: email.split('@')[0].split('.')[0] || 'User'
                }
            })
        });

        if (authResponse.ok) {
            const authData = await authResponse.json();
            console.log(`‚úÖ Utilisateur cr√©√©: ${email}`);
            return { success: true, user: authData.user };
        } else {
            const error = await authResponse.text();
            console.log(`‚ùå Erreur cr√©ation utilisateur: ${error}`);
            return { success: false, error: error };
        }
    } catch (error) {
        console.log(`‚ùå Erreur r√©seau: ${error.message}`);
        return { success: false, error: error.message };
    }
}

// Lancer l'upload
console.log('üöÄ Lancement de l\'upload des donn√©es mock√©es...');
uploadAllMockData().then(results => {
    console.log('\n‚úÖ Upload termin√© !');
    
    // Exposer les fonctions globalement pour utilisation manuelle
    window.uploadMockData = uploadAllMockData;
    window.createTestUser = createTestUser;
    window.checkData = checkExistingData;
    
}).catch(error => {
    console.error('‚ùå Erreur fatale:', error);
});

// Export des fonctions
window.uploadAllMockData = uploadAllMockData;
