{
  "info": {
    "name": "GestionProjet API Tests",
    "description": "Tests automatisés pour l'API de gestion de projets",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "authToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    },
    {
      "key": "projectId",
      "value": "",
      "type": "string"
    },
    {
      "key": "taskId",
      "value": "",
      "type": "string"
    },
    {
      "key": "departmentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "commentId",
      "value": "",
      "type": "string"
    },
    {
      "key": "uploadId",
      "value": "",
      "type": "string"
    },
    {
      "key": "notificationId",
      "value": "",
      "type": "string"
    },
    {
      "key": "expenseId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "🔐 Authentication",
      "item": [
        {
          "name": "Login - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has token\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('token');",
                  "    pm.expect(response.token).to.be.a('string');",
                  "    pm.expect(response.token.length).to.be.greaterThan(0);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response.user).to.have.property('id');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('authToken', response.token);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"admin@example.com\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "Login - Invalid Credentials",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 401\", function () {",
                  "    pm.response.to.have.status(401);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "    pm.expect(response.error).to.be.a('string');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"invalid@example.com\",\n  \"password\": \"wrongpassword\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "login"]
            }
          }
        },
        {
          "name": "Register - Success",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has user data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('user');",
                  "    pm.expect(response.user).to.have.property('id');",
                  "    pm.expect(response.user).to.have.property('email');",
                  "    pm.expect(response.user.email).to.eql('newuser@example.com');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nom\": \"Nouveau\",\n  \"prenom\": \"Utilisateur\",\n  \"email\": \"newuser@example.com\",\n  \"password\": \"password123\",\n  \"fonction\": \"Développeur\",\n  \"departement\": \"IT\",\n  \"role\": \"UTILISATEUR\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        },
        {
          "name": "Register - Email Already Exists",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 400\", function () {",
                  "    pm.response.to.have.status(400);",
                  "});",
                  "",
                  "pm.test(\"Response has error message\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('error');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nom\": \"Test\",\n  \"prenom\": \"User\",\n  \"email\": \"admin@example.com\",\n  \"password\": \"password123\",\n  \"fonction\": \"Développeur\",\n  \"departement\": \"IT\",\n  \"role\": \"UTILISATEUR\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["api", "auth", "register"]
            }
          }
        }
      ]
    },
    {
      "name": "📋 Projects",
      "item": [
        {
          "name": "Get All Projects",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has projects array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('projects');",
                  "    pm.expect(response.projects).to.be.an('array');",
                  "});",
                  "",
                  "pm.test(\"Response has pagination info\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('pagination');",
                  "    pm.expect(response.pagination).to.have.property('total');",
                  "    pm.expect(response.pagination).to.have.property('page');",
                  "    pm.expect(response.pagination).to.have.property('limit');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.projects.length > 0) {",
                  "        pm.collectionVariables.set('projectId', response.projects[0].id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/projects?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get Project by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has project data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('nom');",
                  "    pm.expect(response).to.have.property('description');",
                  "    pm.expect(response).to.have.property('taches');",
                  "    pm.expect(response.taches).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/projects/{{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects", "{{projectId}}"]
            }
          }
        },
        {
          "name": "Create Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has project data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('nom');",
                  "    pm.expect(response.nom).to.eql('Nouveau Projet Test');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('projectId', response.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nom\": \"Nouveau Projet Test\",\n  \"description\": \"Description du nouveau projet\",\n  \"date_debut\": \"2024-01-01\",\n  \"date_fin\": \"2024-12-31\",\n  \"budget_initial\": 50000,\n  \"devise\": \"EUR\",\n  \"responsable_id\": \"{{userId}}\",\n  \"departement_id\": \"{{departmentId}}\",\n  \"statut\": \"actif\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/projects",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects"]
            }
          }
        },
        {
          "name": "Update Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated project data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('nom');",
                  "    pm.expect(response.nom).to.eql('Projet Modifié');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"nom\": \"Projet Modifié\",\n  \"description\": \"Description modifiée\",\n  \"date_debut\": \"2024-01-01\",\n  \"date_fin\": \"2024-12-31\",\n  \"budget_initial\": 60000,\n  \"devise\": \"EUR\",\n  \"responsable_id\": \"{{userId}}\",\n  \"departement_id\": \"{{departmentId}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/projects/{{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects", "{{projectId}}"]
            }
          }
        },
        {
          "name": "Close Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Project status is closed\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('statut');",
                  "    pm.expect(response.statut).to.eql('cloture');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"statut\": \"cloture\",\n  \"date_cloture\": \"2024-12-31\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/projects/{{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects", "{{projectId}}"]
            }
          }
        },
        {
          "name": "Delete Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/projects/{{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "projects", "{{projectId}}"]
            }
          }
        }
      ]
    },
    {
      "name": "✅ Tasks",
      "item": [
        {
          "name": "Get All Tasks",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has tasks array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('tasks');",
                  "    pm.expect(response.tasks).to.be.an('array');",
                  "});",
                  "",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.tasks.length > 0) {",
                  "        pm.collectionVariables.set('taskId', response.tasks[0].id);",
                  "    }",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/tasks?page=1&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"],
              "query": [
                {
                  "key": "page",
                  "value": "1"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "Get Tasks by Project",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has tasks array\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('tasks');",
                  "    pm.expect(response.tasks).to.be.an('array');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/tasks/project/{{projectId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "project", "{{projectId}}"]
            }
          }
        },
        {
          "name": "Get Task by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has task data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('titre');",
                  "    pm.expect(response).to.have.property('description');",
                  "    pm.expect(response).to.have.property('etat');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{taskId}}"]
            }
          }
        },
        {
          "name": "Create Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 201\", function () {",
                  "    pm.response.to.have.status(201);",
                  "});",
                  "",
                  "pm.test(\"Response has task data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('titre');",
                  "    pm.expect(response.titre).to.eql('Nouvelle Tâche Test');",
                  "});",
                  "",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('taskId', response.id);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"titre\": \"Nouvelle Tâche Test\",\n  \"description\": \"Description de la nouvelle tâche\",\n  \"projet_id\": \"{{projectId}}\",\n  \"assignee_id\": \"{{userId}}\",\n  \"priorite\": \"moyenne\",\n  \"date_debut\": \"2024-01-01\",\n  \"date_fin\": \"2024-01-31\",\n  \"etat\": \"a_faire\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks"]
            }
          }
        },
        {
          "name": "Update Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has updated task data\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('id');",
                  "    pm.expect(response).to.have.property('titre');",
                  "    pm.expect(response.titre).to.eql('Tâche Modifiée');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"titre\": \"Tâche Modifiée\",\n  \"description\": \"Description modifiée\",\n  \"priorite\": \"haute\",\n  \"date_debut\": \"2024-01-01\",\n  \"date_fin\": \"2024-01-31\",\n  \"etat\": \"en_cours\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{taskId}}"]
            }
          }
        },
        {
          "name": "Update Task Status",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Task status is completed\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('etat');",
                  "    pm.expect(response.etat).to.eql('terminee');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              },
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"etat\": \"terminee\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{taskId}}"]
            }
          }
        },
        {
          "name": "Delete Task",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "pm.test(\"Status code is 200\", function () {",
                  "    pm.response.to.have.status(200);",
                  "});",
                  "",
                  "pm.test(\"Response has success message\", function () {",
                  "    const response = pm.response.json();",
                  "    pm.expect(response).to.have.property('message');",
                  "});"
                ]
              }
            }
          ],
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{authToken}}"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/api/tasks/{{taskId}}",
              "host": ["{{baseUrl}}"],
              "path": ["api", "tasks", "{{taskId}}"]
            }
          }
        }
      ]
    }
  ]
} 