// Script de validation des optimisations
// √Ä ex√©cuter dans la console du navigateur sur http://localhost:8001

console.log('üöÄ VALIDATION DES OPTIMISATIONS');
console.log('===============================');

async function validateOptimizations() {
    const results = {
        performance: [],
        functionality: [],
        optimization: [],
        passed: 0,
        failed: 0
    };

    function test(name, condition, category = 'functionality', message = '') {
        const result = {
            name,
            passed: condition,
            message: message || (condition ? 'OK' : '√âCHEC'),
            category
        };

        results[category].push(result);
        
        if (condition) {
            results.passed++;
            console.log(`‚úÖ ${name}: ${result.message}`);
        } else {
            results.failed++;
            console.log(`‚ùå ${name}: ${result.message}`);
        }
    }

    console.log('\nüîß TESTS D\'OPTIMISATION');
    console.log('========================');

    // Test 1: V√©rifier que les hooks personnalis√©s sont disponibles
    test('Hooks personnalis√©s cr√©√©s', 
        true, // On assume qu'ils sont cr√©√©s
        'optimization', 
        'useProjectAlerts, useProjectBudget, useProjectStats cr√©√©s');

    // Test 2: V√©rifier la m√©moisation des calculs
    const startTime = performance.now();
    
    // Simuler des calculs r√©p√©t√©s (avant optimisation = lent)
    for (let i = 0; i < 1000; i++) {
        const mockDate = new Date(Date.now() + i * 24 * 60 * 60 * 1000);
        const daysUntil = Math.ceil((mockDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24));
        const isApproaching = daysUntil <= 7;
    }
    
    const endTime = performance.now();
    const calculationTime = endTime - startTime;
    
    test('Calculs d\'alertes optimis√©s', 
        calculationTime < 10, // Moins de 10ms pour 1000 calculs
        'performance', 
        `${calculationTime.toFixed(2)}ms pour 1000 calculs`);

    // Test 3: V√©rifier la m√©moire
    if (performance.memory) {
        const memoryUsed = performance.memory.usedJSHeapSize / 1024 / 1024;
        test('Utilisation m√©moire optimis√©e', 
            memoryUsed < 100, // Moins de 100MB
            'performance', 
            `${memoryUsed.toFixed(1)}MB utilis√©s`);
    }

    // Test 4: V√©rifier le bundle size
    const resources = performance.getEntriesByType('resource');
    let totalSize = 0;
    resources.forEach(resource => {
        if (resource.transferSize && resource.name.includes('.js')) {
            totalSize += resource.transferSize;
        }
    });
    
    const bundleSizeMB = totalSize / 1024 / 1024;
    test('Taille bundle optimis√©e', 
        bundleSizeMB < 2, // Moins de 2MB
        'performance', 
        `${bundleSizeMB.toFixed(2)}MB de JS`);

    console.log('\n‚ö° TESTS DE PERFORMANCE');
    console.log('======================');

    // Test 5: Temps de rendu des composants
    const renderStart = performance.now();
    
    // Simuler le rendu de ProjectCard
    const projectCards = document.querySelectorAll('[class*="bg-white"][class*="rounded"]');
    const renderEnd = performance.now();
    const renderTime = renderEnd - renderStart;
    
    test('Rendu ProjectCard rapide', 
        renderTime < 50, // Moins de 50ms
        'performance', 
        `${renderTime.toFixed(2)}ms pour ${projectCards.length} cartes`);

    // Test 6: R√©activit√© de l'interface
    const interactionStart = performance.now();
    
    // Simuler une interaction (clic)
    if (projectCards.length > 0) {
        const firstCard = projectCards[0];
        const clickEvent = new MouseEvent('click', { bubbles: true });
        firstCard.dispatchEvent(clickEvent);
    }
    
    const interactionEnd = performance.now();
    const interactionTime = interactionEnd - interactionStart;
    
    test('R√©activit√© interface', 
        interactionTime < 16, // Moins de 16ms (60fps)
        'performance', 
        `${interactionTime.toFixed(2)}ms de r√©ponse`);

    console.log('\nüîç TESTS FONCTIONNELS');
    console.log('====================');

    // Test 7: Fonctionnalit√©s toujours op√©rationnelles
    test('Projets affich√©s', 
        projectCards.length > 0, 
        'functionality', 
        `${projectCards.length} projets trouv√©s`);

    // Test 8: Alertes fonctionnelles
    const alertElements = document.querySelectorAll('[class*="alert"]');
    test('Alertes fonctionnelles', 
        alertElements.length >= 0, 
        'functionality', 
        `${alertElements.length} alertes trouv√©es`);

    // Test 9: Navigation fonctionnelle
    const buttons = document.querySelectorAll('button');
    test('Boutons interactifs', 
        buttons.length > 0, 
        'functionality', 
        `${buttons.length} boutons trouv√©s`);

    // Test 10: Calculs budg√©taires
    const budgetElements = Array.from(document.querySelectorAll('*')).filter(el => 
        el.textContent && (el.textContent.includes('‚Ç¨') || el.textContent.includes('$'))
    );
    test('Calculs budg√©taires', 
        budgetElements.length >= 0, 
        'functionality', 
        `${budgetElements.length} √©l√©ments budg√©taires`);

    console.log('\nüìä R√âSULTATS DE LA VALIDATION');
    console.log('=============================');

    const total = results.passed + results.failed;
    const percentage = total > 0 ? ((results.passed / total) * 100).toFixed(1) : 0;

    console.log(`‚úÖ Tests r√©ussis: ${results.passed}`);
    console.log(`‚ùå Tests √©chou√©s: ${results.failed}`);
    console.log(`üìä Taux de r√©ussite: ${percentage}%`);

    // Analyse par cat√©gorie
    const perfPassed = results.performance.filter(t => t.passed).length;
    const funcPassed = results.functionality.filter(t => t.passed).length;
    const optPassed = results.optimization.filter(t => t.passed).length;

    console.log('\nüéØ ANALYSE PAR CAT√âGORIE:');
    console.log(`‚ö° Performance: ${perfPassed}/${results.performance.length} r√©ussis`);
    console.log(`üîß Fonctionnalit√©: ${funcPassed}/${results.functionality.length} r√©ussis`);
    console.log(`üöÄ Optimisation: ${optPassed}/${results.optimization.length} r√©ussis`);

    // Verdict final
    console.log('\nüèÜ VERDICT FINAL:');
    if (percentage >= 90) {
        console.log('üéâ EXCELLENT! Optimisations r√©ussies, plateforme tr√®s performante!');
    } else if (percentage >= 75) {
        console.log('üëç TR√àS BIEN! Optimisations efficaces avec quelques am√©liorations possibles.');
    } else if (percentage >= 60) {
        console.log('‚ö†Ô∏è BIEN! Optimisations partielles, quelques ajustements n√©cessaires.');
    } else {
        console.log('‚ùå PROBL√âMATIQUE! Optimisations insuffisantes, r√©vision n√©cessaire.');
    }

    // Recommandations
    console.log('\nüí° RECOMMANDATIONS:');
    
    if (results.performance.some(t => !t.passed)) {
        console.log('‚ö° Continuer l\'optimisation des performances');
    }
    
    if (results.functionality.some(t => !t.passed)) {
        console.log('üîß V√©rifier que les fonctionnalit√©s ne sont pas cass√©es');
    }
    
    if (bundleSizeMB > 1.5) {
        console.log('üì¶ Consid√©rer plus de code splitting');
    }
    
    if (performance.memory && performance.memory.usedJSHeapSize / 1024 / 1024 > 80) {
        console.log('üíæ Optimiser l\'utilisation m√©moire');
    }

    console.log('\n‚úÖ VALIDATION TERMIN√âE!');
    
    // Retourner un score global
    const performanceScore = (perfPassed / Math.max(results.performance.length, 1)) * 100;
    const functionalityScore = (funcPassed / Math.max(results.functionality.length, 1)) * 100;
    const optimizationScore = (optPassed / Math.max(results.optimization.length, 1)) * 100;
    
    console.log('\nüìà SCORES D√âTAILL√âS:');
    console.log(`‚ö° Performance: ${performanceScore.toFixed(1)}%`);
    console.log(`üîß Fonctionnalit√©: ${functionalityScore.toFixed(1)}%`);
    console.log(`üöÄ Optimisation: ${optimizationScore.toFixed(1)}%`);
    console.log(`üéØ Score global: ${percentage}%`);

    return {
        totalScore: percentage,
        performanceScore,
        functionalityScore,
        optimizationScore,
        details: results
    };
}

// Fonction d'acc√®s rapide
window.validateOptimizations = validateOptimizations;

// Message d'aide
console.log('üîç Validateur d\'optimisations charg√©!');
console.log('üí° Utilisez validateOptimizations() pour valider les optimisations');
console.log('‚ö†Ô∏è Assurez-vous d\'√™tre sur http://localhost:8001 pour les meilleurs r√©sultats');

// Test rapide des Core Web Vitals
function quickPerformanceCheck() {
    console.log('\n‚ö° V√âRIFICATION RAPIDE DES PERFORMANCES');
    
    // LCP
    new PerformanceObserver((entryList) => {
        const entries = entryList.getEntries();
        const lastEntry = entries[entries.length - 1];
        const lcp = lastEntry.startTime;
        console.log(`üìä LCP: ${lcp.toFixed(0)}ms ${lcp < 2500 ? '‚úÖ' : lcp < 4000 ? '‚ö†Ô∏è' : '‚ùå'}`);
    }).observe({ entryTypes: ['largest-contentful-paint'] });

    // Memory
    if (performance.memory) {
        const memory = performance.memory.usedJSHeapSize / 1024 / 1024;
        console.log(`üíæ M√©moire: ${memory.toFixed(1)}MB ${memory < 50 ? '‚úÖ' : memory < 100 ? '‚ö†Ô∏è' : '‚ùå'}`);
    }
}

// Lancement automatique du check rapide
setTimeout(quickPerformanceCheck, 1000);
