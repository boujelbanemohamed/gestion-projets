const { createClient } = require('@supabase/supabase-js');

// Configuration Supabase (remplacez par vos vraies cl√©s)
const supabaseUrl = 'https://obdadipsbbrlwetkuyui.supabase.co';
const serviceRoleKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im9iZGFkaXBzYmJybHdldGt1eXVpIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NDQ4ODEyMywiZXhwIjoyMDcwMDY0MTIzfQ.YVuesp3wprnLPM8I1gTAEqhkMCyUoL5E5sedHVJD_ZY';

const supabase = createClient(supabaseUrl, serviceRoleKey);

async function testUserSynchronization() {
  console.log('üß™ Test de synchronisation des utilisateurs...\n');

  try {
    // 1. R√©cup√©rer tous les utilisateurs auth
    console.log('üìã 1. R√©cup√©ration des utilisateurs auth.users...');
    const { data: authUsers, error: authError } = await supabase.auth.admin.listUsers();
    
    if (authError) {
      console.error('‚ùå Erreur auth.users:', authError);
      return;
    }
    
    console.log(`‚úÖ ${authUsers.users.length} utilisateurs trouv√©s dans auth.users`);

    // 2. R√©cup√©rer tous les profils
    console.log('\nüìã 2. R√©cup√©ration des profils public.users...');
    const { data: profileUsers, error: profileError } = await supabase
      .from('users')
      .select('*');
    
    if (profileError) {
      console.error('‚ùå Erreur public.users:', profileError);
      return;
    }
    
    console.log(`‚úÖ ${profileUsers.length} profils trouv√©s dans public.users`);

    // 3. Analyser la synchronisation
    console.log('\nüîç 3. Analyse de la synchronisation...');
    
    const authUserIds = new Set(authUsers.users.map(u => u.id));
    const profileUserIds = new Set(profileUsers.map(u => u.id));
    
    // Utilisateurs auth sans profil
    const authWithoutProfile = authUsers.users.filter(u => !profileUserIds.has(u.id));
    
    // Profils sans utilisateur auth
    const profileWithoutAuth = profileUsers.filter(u => !authUserIds.has(u.id));
    
    // Utilisateurs avec m√©tadonn√©es manquantes
    const usersWithMissingMetadata = authUsers.users.filter(u => {
      const metadata = u.user_metadata || {};
      return !metadata.nom || !metadata.prenom || !metadata.role;
    });

    console.log(`üìä R√©sultats de l'analyse:`);
    console.log(`   - Utilisateurs auth sans profil: ${authWithoutProfile.length}`);
    console.log(`   - Profils sans utilisateur auth: ${profileWithoutAuth.length}`);
    console.log(`   - Utilisateurs avec m√©tadonn√©es manquantes: ${usersWithMissingMetadata.length}`);

    // 4. Afficher les d√©tails des probl√®mes
    if (authWithoutProfile.length > 0) {
      console.log('\n‚ö†Ô∏è Utilisateurs auth sans profil:');
      authWithoutProfile.forEach(u => {
        console.log(`   - ${u.email} (ID: ${u.id})`);
      });
    }

    if (profileWithoutAuth.length > 0) {
      console.log('\n‚ö†Ô∏è Profils sans utilisateur auth:');
      profileWithoutAuth.forEach(u => {
        console.log(`   - ${u.email} (ID: ${u.id})`);
      });
    }

    if (usersWithMissingMetadata.length > 0) {
      console.log('\n‚ö†Ô∏è Utilisateurs avec m√©tadonn√©es manquantes:');
      usersWithMissingMetadata.forEach(u => {
        const metadata = u.user_metadata || {};
        console.log(`   - ${u.email}: nom=${metadata.nom || 'MANQUANT'}, prenom=${metadata.prenom || 'MANQUANT'}, role=${metadata.role || 'MANQUANT'}`);
      });
    }

    // 5. Suggestions de correction
    console.log('\nüí° Suggestions de correction:');
    
    if (authWithoutProfile.length > 0) {
      console.log('   - Ex√©cuter la fonction checkAndFixUserSync() depuis l\'interface');
      console.log('   - Ou cr√©er manuellement les profils manquants');
    }
    
    if (usersWithMissingMetadata.length > 0) {
      console.log('   - Mettre √† jour les m√©tadonn√©es des utilisateurs auth');
      console.log('   - Utiliser la fonction updateUser() pour synchroniser');
    }

    // 6. Test de cr√©ation d'un utilisateur de test
    console.log('\nüß™ 4. Test de cr√©ation d\'un utilisateur de test...');
    
    const testUserData = {
      email: `test.sync.${Date.now()}@example.com`,
      password: 'TestPassword123!',
      nom: 'Test',
      prenom: 'Sync',
      role: 'USER',
      fonction: 'Testeur'
    };

    console.log('   Cr√©ation de l\'utilisateur de test...');
    const { data: testAuthData, error: testAuthError } = await supabase.auth.admin.createUser({
      email: testUserData.email,
      password: testUserData.password,
      user_metadata: {
        nom: testUserData.nom,
        prenom: testUserData.prenom,
        role: testUserData.role,
        fonction: testUserData.fonction
      }
    });

    if (testAuthError) {
      console.error('   ‚ùå Erreur cr√©ation utilisateur de test:', testAuthError);
    } else {
      console.log('   ‚úÖ Utilisateur de test cr√©√© dans auth.users');
      
      // V√©rifier si le profil a √©t√© cr√©√© automatiquement
      setTimeout(async () => {
        const { data: testProfile } = await supabase
          .from('users')
          .select('*')
          .eq('id', testAuthData.user.id)
          .single();
        
        if (testProfile) {
          console.log('   ‚úÖ Profil cr√©√© automatiquement dans public.users');
        } else {
          console.log('   ‚ö†Ô∏è Profil non cr√©√© automatiquement');
        }
        
        // Nettoyer l'utilisateur de test
        await supabase.auth.admin.deleteUser(testAuthData.user.id);
        console.log('   üßπ Utilisateur de test supprim√©');
      }, 2000);
    }

    console.log('\n‚úÖ Test de synchronisation termin√© !');

  } catch (error) {
    console.error('‚ùå Erreur lors du test:', error);
  }
}

// Ex√©cuter le test
testUserSynchronization();
